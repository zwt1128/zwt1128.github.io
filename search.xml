<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TypeScript</title>
      <link href="/2021/09/19/hello-world/"/>
      <url>/2021/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><h3 id="1-1-TS简介"><a href="#1-1-TS简介" class="headerlink" title="1.1 TS简介"></a>1.1 TS简介</h3><p>TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。</p><p>TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如 class / interface / module 等。这样会大大提升代码的可阅读性。</p><p>和 JavaScript 弱类型不同，TypeScript 这种强类型语言最大的优势在于静态类型检查，可以在代码开发阶段就预知一些低级错误的发生。</p><ul><li>一种类似于 JavaScript 的语言，在 JavaScript 的基础之上增加了类型，同时增强了 JavaScript 部分语法功能</li><li>遵循 EcmaScript 6 标准规范</li><li>由微软开发</li><li>Angular 2 框架采用 TypeScript 编写</li><li>背后有微软和谷歌两大公司的支持</li><li>TypeScript 可以编译成 JavaScript 从而在支持 JavaScript 的环境中运行</li><li>TypeScript 和 JavaScript 的关系就好比 less 和 css 的关系<br>TypeScript 中文网 <a href="https://www.tslang.cn/">https://www.tslang.cn/</a></li></ul><p>在线编译环境 <a href="https://www.typescriptlang.org/play/index.html">https://www.typescriptlang.org/play/index.html</a></p><h3 id="1-2-TS环境搭建"><a href="#1-2-TS环境搭建" class="headerlink" title="1.2 TS环境搭建"></a>1.2 TS环境搭建</h3><ul><li>打开命令行，键入npm i -g typescript 全局安装TS</li><li>继续在命令行环境下键入 tsc -init 进行初始化，</li><li>你会发现根目录下多了 tsconfig.json 的文件，记录了编译成JS的选项</li><li>创建ts文件</li><li>打开VSCode进入该目录，按下 Ctrl+shift+B 快捷键会进行编译，初次编译会选择编译模式</li><li>输入node命令运行js代码<h3 id="1-3-变量声明"><a href="#1-3-变量声明" class="headerlink" title="1.3 变量声明"></a>1.3 变量声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var</span><br><span class="line">- 作用域 : 全局作用域、函数作用域</span><br><span class="line">- 重复声明</span><br><span class="line">- 变量提升</span><br><span class="line"></span><br><span class="line">let</span><br><span class="line">- 块级作用域</span><br><span class="line">- 在同一个块中不能重复声明</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span></span><br><span class="line">- 声明同时必须赋值</span><br><span class="line">- 一旦声明不可改变（对象可以修改）</span><br><span class="line">- 块级作用域</span><br></pre></td></tr></table></figure><h3 id="1-4-基本数据类型"><a href="#1-4-基本数据类型" class="headerlink" title="1.4 基本数据类型"></a>1.4 基本数据类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串</span></span><br><span class="line">var uname:<span class="built_in">string</span> = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">let nickname: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">let isDone: boolean = <span class="literal">false</span>;</span><br><span class="line">let age: number = <span class="number">37</span>;</span><br><span class="line">let sentence: <span class="built_in">string</span> = `Hello, my nickname is $&#123; nickname &#125;.</span><br><span class="line"></span><br><span class="line">I<span class="number">&#x27;ll</span> be $&#123; age + <span class="number">1</span> &#125; years old next month.`</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="comment">//TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上[]，表示由此类型元素组成的一个数组：</span></span><br><span class="line">let <span class="built_in">list</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式是使用数组泛型，Array&lt;元素类型&gt;：</span></span><br><span class="line">let <span class="built_in">list</span>: Array&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">javascript</span><br><span class="line"><span class="comment">//ts的数组只能存放单一数据类型的元素，元组则可以很好的解决此问题。</span></span><br><span class="line"><span class="comment">//元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为string和number类型的元组。</span></span><br><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line">let x: [<span class="built_in">string</span>, number];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>]; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object类型</span></span><br><span class="line">- 允许赋任意值</span><br><span class="line">- 但是不能调用任意方法，即便它真的有</span><br><span class="line"></span><br><span class="line">let foo: object = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//知道即可，用的很少，没有类型校验和语法提示</span></span><br><span class="line">javascript</span><br><span class="line"><span class="comment">//Any</span></span><br><span class="line"><span class="comment">//有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：</span></span><br><span class="line"></span><br><span class="line">let notSure: any = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&quot;maybe a string instead&quot;</span>;</span><br><span class="line">notSure = <span class="literal">false</span>; <span class="comment">// okay, definitely a boolean</span></span><br><span class="line">javascript</span><br><span class="line"><span class="comment">//Void 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void：</span></span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">warnUser</span><span class="params">()</span>: <span class="keyword">void</span> </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;This is my warning message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined：</span></span><br><span class="line">let unusable: <span class="keyword">void</span> = undefined;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Null 和 Undefined</span></span><br><span class="line"><span class="comment">// Not much else we can assign to these variables!</span></span><br><span class="line">let u: undefined = undefined;</span><br><span class="line">let n: null = null;</span><br><span class="line"></span><br><span class="line"><span class="comment">//never    </span></span><br><span class="line">never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。</span><br><span class="line">let x: never;</span><br><span class="line">let y: number;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行错误，数字类型不能转为 never 类型</span></span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// 运行正确，never 类型可以赋值给 never类型</span></span><br><span class="line">x = (()=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&#x27;exception&#x27;</span>)&#125;)();</span><br><span class="line"><span class="comment">// 运行正确，never 类型可以赋值给 数字类型</span></span><br><span class="line">y = (()=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&#x27;exception&#x27;</span>)&#125;)();</span><br><span class="line"><span class="comment">// 返回值为 never 的函数可以是抛出异常的情况</span></span><br><span class="line"><span class="function">function <span class="title">error</span><span class="params">(message: <span class="built_in">string</span>)</span>: never </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Error(message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回值为 never 的函数可以是无法被执行到的终止点的情况</span></span><br><span class="line"><span class="function">function <span class="title">loop</span><span class="params">()</span>: never </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型推断</span></span><br><span class="line"><span class="comment">// 有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型断言有两种形式。 其一是“尖括号”语法：</span></span><br><span class="line"></span><br><span class="line">let someValue: any = <span class="literal">true</span>;</span><br><span class="line">let strLength: number = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个为as语法：</span></span><br><span class="line">let someValue: any = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line">let strLength: number = (someValue as <span class="built_in">string</span>).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 as语法断言是被允许的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举类型</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> &#123;</span>Red, Green, Blue&#125;;</span><br><span class="line">let c: Color = Color.Blue;</span><br><span class="line">console.<span class="built_in">log</span>(c);    <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><h3 id="1-5-解构赋值"><a href="#1-5-解构赋值" class="headerlink" title="1.5 解构赋值"></a>1.5 解构赋值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组解构</span></span><br><span class="line">let input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">let [first, second] = input;</span><br><span class="line">console.<span class="built_in">log</span>(first); <span class="comment">// outputs 1</span></span><br><span class="line">console.<span class="built_in">log</span>(second); <span class="comment">// outputs 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的写法等价于：</span></span><br><span class="line">first = input[<span class="number">0</span>];</span><br><span class="line">second = input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用解构赋值交换变量：</span></span><br><span class="line">[first, second] = [second, first];</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数参数解构：</span></span><br><span class="line"><span class="comment">//函数参数解构：</span></span><br><span class="line"><span class="function">function <span class="title">ff</span><span class="params">([first, second]: [number, number])</span> </span>&#123; </span><br><span class="line">  console.<span class="built_in">log</span>(first)</span><br><span class="line">  console.<span class="built_in">log</span>(second)</span><br><span class="line">&#125;</span><br><span class="line">ff([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构剩余参数：</span></span><br><span class="line">let [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">console.<span class="built_in">log</span>(first) <span class="comment">// 1</span></span><br><span class="line">console.<span class="built_in">log</span>(rest) <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以忽略其它参数：</span></span><br><span class="line">let [first] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">console.<span class="built_in">log</span>(first); <span class="comment">// outputs 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者跳过解构：</span></span><br><span class="line">let [, second, , fourth] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构</span></span><br><span class="line">let o = &#123;</span><br><span class="line">    a: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    b: <span class="number">12</span>,</span><br><span class="line">    c: <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//let &#123; a, b &#125; = o;</span></span><br><span class="line"><span class="comment">//let &#123;a, b&#125;: &#123;a: string, b: number&#125; = o;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你可以在对象里使用 ... 语法创建剩余变量：</span></span><br><span class="line">let &#123; a, ...passthrough &#125; = o;</span><br><span class="line">let total = passthrough.b + passthrough.c.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性解构重命名</span></span><br><span class="line"><span class="comment">//你也可以给属性以不同的名字：</span></span><br><span class="line">let &#123; a: newName1, b: newName2 &#125; = o;</span><br></pre></td></tr></table></figure><h3 id="1-6-展开操作符-…"><a href="#1-6-展开操作符-…" class="headerlink" title="1.6 展开操作符 (…)"></a>1.6 展开操作符 (…)</h3></li><li>展开数组</li><li>展开对象<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">let arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">let arr3 = [...arr1, ...arr2];</span><br><span class="line"></span><br><span class="line">let obj1 = &#123; a: <span class="number">1</span>, b: <span class="number">2</span> &#125;;</span><br><span class="line">let obj2 = &#123; c: <span class="number">3</span> &#125;</span><br><span class="line">let obj3 = &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line">console.<span class="built_in">log</span>(arr3,obj3)</span><br></pre></td></tr></table></figure><h3 id="1-7-函数"><a href="#1-7-函数" class="headerlink" title="1.7 函数"></a>1.7 函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数参数</span></span><br><span class="line"><span class="comment">//参数及返回值类型</span></span><br><span class="line"><span class="comment">//function 函数名字(参数1,参数2,参数3):函数返回值&#123;函数体&#125;</span></span><br><span class="line"><span class="function">function <span class="title">add</span><span class="params">(x: number, y: number)</span>: number </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可选参数</span></span><br><span class="line">function add(x: number, y?: number): number &#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认参数</span></span><br><span class="line">function add(x: number, y: number = <span class="number">20</span>): number &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余参数</span></span><br><span class="line">function sum(...args: number[]): number &#123;</span><br><span class="line">    let ret: number = <span class="number">0</span></span><br><span class="line">    args.forEach((item: number): <span class="keyword">void</span> =&gt; &#123;</span><br><span class="line">        ret += item</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line">let add = (x: number, y: number): number =&gt; x + y</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数重载：重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数类型不同：</span></span><br><span class="line">function disp(<span class="built_in">string</span>):<span class="keyword">void</span>; </span><br><span class="line"><span class="function">function <span class="title">disp</span><span class="params">(number)</span>:<span class="keyword">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数数量不同：</span></span><br><span class="line"><span class="function">function <span class="title">disp</span><span class="params">(n1:number)</span>:<span class="keyword">void</span></span>; </span><br><span class="line"><span class="function">function <span class="title">disp</span><span class="params">(x:number,y:number)</span>:<span class="keyword">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数类型顺序不同：</span></span><br><span class="line"><span class="function">function <span class="title">disp</span><span class="params">(n1:number,s1:<span class="built_in">string</span>)</span>:<span class="keyword">void</span></span>; </span><br><span class="line"><span class="function">function <span class="title">disp</span><span class="params">(s:<span class="built_in">string</span>,n:number)</span>:<span class="keyword">void</span></span>;</span><br></pre></td></tr></table></figure><h3 id="1-8-联合类型"><a href="#1-8-联合类型" class="headerlink" title="1.8 联合类型"></a>1.8 联合类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。</span></span><br><span class="line"></span><br><span class="line">var val:<span class="built_in">string</span>|number </span><br><span class="line">val = <span class="number">12</span> </span><br><span class="line">val = <span class="string">&quot;Runoob&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var arr:number[]|<span class="built_in">string</span>[]; </span><br><span class="line">var i:number; </span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>] </span><br><span class="line">arr = [<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Taobao&quot;</span>] </span><br></pre></td></tr></table></figure><h3 id="1-9-类"><a href="#1-9-类" class="headerlink" title="1.9 类"></a>1.9 类</h3><h4 id="1-9-1-类的基本使用"><a href="#1-9-1-类的基本使用" class="headerlink" title="1.9.1 类的基本使用"></a>1.9.1 类的基本使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    constructor(name: <span class="built_in">string</span>, age: number) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let zs: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><h4 id="1-8-2-super关键字的使用"><a href="#1-8-2-super关键字的使用" class="headerlink" title="1.8.2 super关键字的使用"></a>1.8.2 super关键字的使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    move(distanceInMeters: number = <span class="number">0</span>) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(`Animal moved $&#123;distanceInMeters&#125;m.`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">extends</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    bark() &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&#x27;Woof! Woof!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(<span class="number">10</span>);</span><br><span class="line">dog.bark();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为 Dog继承了 Animal的功能，因此我们可以创建一个 Dog的实例，它能够 bark()和 move()。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是一个更复杂的例子：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    constructor(theName: <span class="built_in">string</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.name = theName; </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters: number = <span class="number">0</span>) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(`$&#123;<span class="keyword">this</span>.name&#125; moved $&#123;distanceInMeters&#125;m.`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="title">extends</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    constructor(name: <span class="built_in">string</span>) &#123; </span><br><span class="line">        super(name); </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&quot;Slithering...&quot;</span>);</span><br><span class="line">        super.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="title">extends</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    constructor(name: <span class="built_in">string</span>) &#123; </span><br><span class="line">        super(name); </span><br><span class="line">    &#125;</span><br><span class="line">    move(distanceInMeters = <span class="number">45</span>) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&quot;Galloping...&quot;</span>);</span><br><span class="line">        super.move(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let sam = <span class="keyword">new</span> Snake(<span class="string">&quot;Sammy the Python&quot;</span>);</span><br><span class="line">let tom: Animal = <span class="keyword">new</span> Horse(<span class="string">&quot;Tommy the Palomino&quot;</span>);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个例子演示了如何在子类里可以重写父类的方法。 Snake类和 Horse类都创建了 move方法，它们重写了从Animal继承来的 move方法，使得 move方法根据不同的类而具有不同的功能。 注意，即使 tom被声明为Animal类型，但因为它的值是 Horse，调用 tom.move(34)时，它会调用 Horse里重写的方法：</span></span><br><span class="line"></span><br><span class="line">Slithering...</span><br><span class="line">Sammy the Python moved <span class="number">5</span>m.</span><br><span class="line">Galloping...</span><br><span class="line">Tommy the Palomino moved <span class="number">34</span>m.</span><br></pre></td></tr></table></figure><h4 id="1-9-3-成员修饰符"><a href="#1-9-3-成员修饰符" class="headerlink" title="1.9.3 成员修饰符"></a>1.9.3 成员修饰符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public 公共的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">constructor</span><span class="params">(theName: <span class="built_in">string</span>)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = theName; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">move</span><span class="params">(distanceInMeters: number)</span> </span>&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(`$&#123;<span class="keyword">this</span>.name&#125; moved $&#123;distanceInMeters&#125;m.`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//private 私有的</span></span><br><span class="line">- 不能被外部访问，只能在类的内部访问使用</span><br><span class="line">- 私有成员不会被继承</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> age: number = <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">private</span> type: <span class="built_in">string</span> = <span class="string">&#x27;human&#x27;</span></span><br><span class="line">  <span class="keyword">public</span> constructor (name:<span class="built_in">string</span>, age:number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//protected 受保护的</span></span><br><span class="line">- 和 <span class="keyword">private</span> 类似，但是可以被继承</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">    constructor(name: <span class="built_in">string</span>) &#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="title">extends</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> department: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    constructor(name: <span class="built_in">string</span>, department: <span class="built_in">string</span>) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">getElevatorPitch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> `Hello, my name is $&#123;<span class="keyword">this</span>.name&#125; <span class="keyword">and</span> I work in $&#123;<span class="keyword">this</span>.department&#125;.`;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let howard = <span class="keyword">new</span> Employee(<span class="string">&quot;Howard&quot;</span>, <span class="string">&quot;Sales&quot;</span>);</span><br><span class="line">console.<span class="built_in">log</span>(howard.getElevatorPitch());</span><br><span class="line">console.<span class="built_in">log</span>(howard.name); <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，我们不能在 Person类外使用 name，但是我们仍然可以通过 Employee类的实例方法访问，因为Employee是由 Person派生而来的。</span></span><br></pre></td></tr></table></figure><h4 id="1-9-4-getter和setter"><a href="#1-9-4-getter和setter" class="headerlink" title="1.9.4 getter和setter"></a>1.9.4 getter和setter</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span> _name:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    constructor(name: <span class="built_in">string</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">set</span> <span class="title">name</span><span class="params">(value:<span class="built_in">string</span>)</span> </span>&#123;<span class="keyword">this</span>._name = value;&#125;</span><br><span class="line">    <span class="function">get <span class="title">name</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>._name;&#125;</span><br><span class="line"></span><br><span class="line">    talk()</span><br><span class="line">    &#123;</span><br><span class="line">        alert(<span class="string">&quot;Hi, my name is &quot;</span> + <span class="keyword">this</span>.name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-9-5-静态成员"><a href="#1-9-5-静态成员" class="headerlink" title="1.9.5 静态成员"></a>1.9.5 静态成员</h4></li><li>不需要实例化访问的成员称之为静态成员，即只能被类访问的成员</li><li>static 关键字<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">static</span> country = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">    <span class="comment">//京塔方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">sayhello</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    constructor () &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p1 = <span class="keyword">new</span> Person();  </span><br><span class="line">let p2 = <span class="keyword">new</span> Person(); </span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(Person.country)  <span class="comment">//静态变量，直接通过类型来访问</span></span><br><span class="line">console.<span class="built_in">log</span>(p1.country) <span class="comment">//错误</span></span><br></pre></td></tr></table></figure><h3 id="1-10-接口"><a href="#1-10-接口" class="headerlink" title="1.10 接口"></a>1.10 接口</h3>在面向对象编程中，接口是一种规范的定义，它定义了行为和动作规范，起到一种限制和规范的作用。<br>接口不关心状态数据，也不关心方法的实现细节，它只规定了一些属性和方法，而实现接口的类必须提供具体的信息。</li></ul><h4 id="1-10-1-接口对类的规范"><a href="#1-10-1-接口对类的规范" class="headerlink" title="1.10.1 接口对类的规范"></a>1.10.1 接口对类的规范</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个人的接口</span></span><br><span class="line">interface Human &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: number;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让老师类实现Human接口，老师类实现接口的时候必须提供接口的具体信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="title">implements</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">    name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    age = <span class="number">38</span>;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&quot;老师说&quot;</span>+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让学生类实现Human接口，学生类实现接口的时候必须提供接口的具体信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span> <span class="title">Human</span>&#123;</span></span><br><span class="line">    name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    age = <span class="number">18</span>;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">         console.<span class="built_in">log</span>(<span class="string">&quot;学生说&quot;</span>+word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-10-2-接口对对象的规范"><a href="#1-10-2-接口对对象的规范" class="headerlink" title="1.10.2 接口对对象的规范"></a>1.10.2 接口对对象的规范</h4><p>TypeScript 中的接口除了可用于对类的一部分行为进行抽象以外，也常用于对对象的形状（Shape）进行描述</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">javascript</span><br><span class="line">interface Shape &#123;</span><br><span class="line">    head: <span class="built_in">string</span>;</span><br><span class="line">    arm: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line">interface Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: number;</span><br><span class="line">    shape: Shape;</span><br><span class="line">    say(word: <span class="built_in">string</span>): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    shape: &#123;</span><br><span class="line">        head: <span class="string">&#x27;head&#x27;</span>,</span><br><span class="line">        arm: <span class="string">&#x27;arm&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    say(word: <span class="built_in">string</span>) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(word)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">jack.say(<span class="string">&#x27;hi&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-10-3-接口可选属性"><a href="#1-10-3-接口可选属性" class="headerlink" title="1.10.3 接口可选属性"></a>1.10.3 接口可选属性</h4><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    gender: <span class="built_in">string</span>,</span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person = &#123;</span><br><span class="line">    gender: <span class="string">&#x27;Male&#x27;</span></span><br><span class="line">    <span class="comment">// 可以不赋值 age 属性，因为是可选的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-10-4-接口只读属性"><a href="#1-10-4-接口只读属性" class="headerlink" title="1.10.4 接口只读属性"></a>1.10.4 接口只读属性</h4><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    readonly name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jack.name = <span class="string">&#x27;Ivan&#x27;</span> <span class="comment">// 报错: name 是只读的</span></span><br></pre></td></tr></table></figure><p>readonly vs const</p><ul><li>常量使用 const</li><li>对象属性使用 readonly<h4 id="1-10-5-函数接口"><a href="#1-10-5-函数接口" class="headerlink" title="1.10.5 函数接口"></a>1.10.5 函数接口</h4>因为函数也是对象，所以我们也可以通过接口来对函数做“规定”。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Fn &#123;</span><br><span class="line">    (a: number, b: number): number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let add: Fn = function(a: number, b: number): number &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="1-10-6-接口继承"><a href="#1-10-6-接口继承" class="headerlink" title="1.10.6 接口继承"></a>1.10.6 接口继承</h4>就像 ES6 的 class 一样，接口也可以做继承操作，效果就是会继承父接口的“规定”。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface Animal &#123;</span><br><span class="line">    move(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Human extends Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let jack: Human = &#123;</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    move() &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="string">&#x27;move&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-11-命名空间"><a href="#1-11-命名空间" class="headerlink" title="1.11 命名空间"></a>1.11 命名空间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名空间就是内部模块，目的就是解决重名问题。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//a.ts  声明命名空间</span></span><br><span class="line"><span class="comment">//TypeScript 的命名空间只对外暴露需要在外部访问的对象，命名空间内的对象通过 export 关键字对外暴露</span></span><br><span class="line"><span class="keyword">namespace</span> Utils &#123;</span><br><span class="line">  <span class="keyword">export</span> interface IPerson &#123;</span><br><span class="line">      name: <span class="built_in">string</span>;</span><br><span class="line">      age: number;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my.ts  使用命名空间</span></span><br><span class="line"><span class="comment">// reference 引用命名空间(可以加也可以不加)</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;a.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me: Utils.IPerson = &#123;</span><br><span class="line">  name: <span class="string">&#x27;funlee&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(me); <span class="comment">// &#123;name: &#x27;funlee&#x27;, age: 18&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-12-模块"><a href="#1-12-模块" class="headerlink" title="1.12 模块"></a>1.12 模块</h3><p>模块是在其自身的作用域里执行，并不是在全局作用域，这意味着定义在模块里面的变量、函数和类等在模块外部是不可见的，除非明确地使用 export 导出它们。类似地，我们必须通过 import 导入其他模块导出的变量、函数、类等。</p><p>两个模块之间的关系是通过在文件级别上使用 import 和 export 建立的(其实就是ES6的模块化语法)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出模块</span></span><br><span class="line"><span class="keyword">export</span> var num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">export</span> var str = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">export</span> function <span class="title">say</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">var title = <span class="string">&quot;标题&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> title;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">import</span> title,&#123;num,str,say&#125; from <span class="string">&#x27;./a&#x27;</span></span><br><span class="line">console.<span class="built_in">log</span>(title,str,say)</span><br></pre></td></tr></table></figure><h3 id="1-13-声明文件"><a href="#1-13-声明文件" class="headerlink" title="1.13 声明文件"></a>1.13 声明文件</h3><p>d.ts为声明文件 主要用作类型的声明</p><ul><li>在d.ts使用了declare，表示全局声明类型，需要结合tsconfig.json一起使用才能有效果。 (使用方式：类似于命名空间)</li><li>或者使用export的方式，在普通ts中将d.ts导入(使用方式：类似于模块)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//data.d.ts    注意：只有声明没有实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型</span></span><br><span class="line">declare type StringFunc = () =&gt; <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个命名空间</span></span><br><span class="line">declare <span class="keyword">namespace</span> API &#123;</span><br><span class="line">  <span class="comment">//导出CurrentUser接口类型</span></span><br><span class="line">  <span class="keyword">export</span> interface CurrentUser &#123;</span><br><span class="line">    avatar?: <span class="built_in">string</span>;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    title?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-14-小练习"><a href="#1-14-小练习" class="headerlink" title="1.14 小练习"></a>1.14 小练习</h3>写出下列ts代码的含义：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出一个函数 函数名字是defineConfig，函数参数是config，参数类型是IConfigFromPlugins或者IConfig，返回值是IConfigFromPlugins或者IConfig</span></span><br><span class="line"><span class="function"><span class="keyword">export</span> declare function <span class="title">defineConfig</span><span class="params">(config: IConfigFromPlugins | IConfig)</span>: IConfigFromPlugins | IConfig</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫OverlayFunc，该类型是一个函数，该函数的返回值是ReactNode</span></span><br><span class="line">declare type OverlayFunc = () =&gt; React.ReactNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出一个类型，该类型叫SiderTheme，他的值是light或者dark</span></span><br><span class="line"><span class="keyword">export</span> type SiderTheme = <span class="string">&#x27;light&#x27;</span> | <span class="string">&#x27;dark&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量，名字叫columns，他的类型是ProColumns的数组，数组中的元素是TableListItem</span></span><br><span class="line"><span class="keyword">const</span> columns: ProColumns&lt;TableListItem&gt;[] = []</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量，名字叫LoginMessage，他的类型是React.FC，React.FC中接收&#123;content: string&#125;类型的数据。LoginMessage的值是一个箭头函数，该函数通过解构赋值或者content作为函数的入参，函数没有返回值</span></span><br><span class="line"><span class="keyword">const</span> LoginMessage: React.FC&lt;&#123;</span><br><span class="line">  content: <span class="built_in">string</span>;</span><br><span class="line">&#125;&gt; = (&#123; content &#125;) =&gt; ()</span><br><span class="line"></span><br><span class="line"><span class="comment">//type的 | 和 &amp;</span></span><br><span class="line">type Env1 = <span class="string">&#x27;prod&#x27;</span> | <span class="string">&#x27;test&#x27;</span> | <span class="string">&#x27;dev&#x27;</span>;</span><br><span class="line">type Env2 = <span class="string">&#x27;prod&#x27;</span> | <span class="string">&#x27;boe&#x27;</span> | <span class="string">&#x27;ppe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">type EnvUnion = Env1 | Env2; <span class="comment">// &#x27;prod&#x27; | &#x27;test&#x27; | &#x27;dev&#x27; | &#x27;boe&#x27; | &#x27;ppe&#x27;  取并集</span></span><br><span class="line">type EnvInter = Env1 &amp; Env2; <span class="comment">// &#x27;prod&#x27;   取交集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫Partial，主要作用就是将T中的每一个键可选</span></span><br><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P in keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个类型叫Pick 主要作用选择T中的符合条件的属性</span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/weixin_34376986/article/details/93167453</span></span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; = &#123;</span><br><span class="line">    [P in K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断T是不是继承U，如果是则取never类型，否则取T类型本身</span></span><br><span class="line">type Exclude&lt;T, U&gt; = T extends U ? never : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断T是不是继承U，如果是则取T类型，否则取never类型</span></span><br><span class="line">type Extract&lt;T, U&gt; = T extends U ? T : never;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Omit 主要作用 选择T中除了K之外的其他属性          </span></span><br><span class="line">type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个常量REACT_APP_ENV，他的值是test  dev  pre 或者false中的任意一个</span></span><br><span class="line">declare <span class="keyword">const</span> REACT_APP_ENV: <span class="string">&#x27;test&#x27;</span> | <span class="string">&#x27;dev&#x27;</span> | <span class="string">&#x27;pre&#x27;</span> | <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt</title>
      <link href="/2021/09/19/Nuxt/"/>
      <url>/2021/09/19/Nuxt/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1-Nuxt简介"><a href="#1-1-Nuxt简介" class="headerlink" title="1.1 Nuxt简介"></a>1.1 Nuxt简介</h3><p>Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染(SSR)的 Vue 应用提供了极其便利的开发体验。</p><p>Vue.js是开发SPA单页面应用的，传统的SPA应用是将bundle.js从服务端获取，然后在客户端解析并挂载到dom。</p><p>Nuxt这个框架是用Vue开发多页应用，并在服务端渲染。我们可以将组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。</p><p>Nuxt适合做新闻、博客、电影、咨询这样的需要搜索引擎提供流量的项目。如果你要做到是移动端项目，就没有必要用nuxt这个框架了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Nuxt.js有如下特点：</span><br><span class="line">Vue <span class="number">2</span> ： nuxt是基于Vue2开发的</span><br><span class="line">Vue Router  ： nuxt整合了路由功能，配置非常简单</span><br><span class="line">VueX  ： 支持vuex</span><br><span class="line">Vue Server Renderer  ： 支持服务端渲染</span><br><span class="line">Vue-meta  ： 支持meta标签配置</span><br></pre></td></tr></table></figure><h3 id="1-2-Nuxt项目创建"><a href="#1-2-Nuxt项目创建" class="headerlink" title="1.2 Nuxt项目创建"></a>1.2 Nuxt项目创建</h3><p><a href="https://zh.nuxtjs.org/guide/installation#%E6%96%B0%E6%89%8B%E6%A8%A1%E6%9D%BF">https://zh.nuxtjs.org/guide/installation#%E6%96%B0%E6%89%8B%E6%A8%A1%E6%9D%BF</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建nuxt项目</span></span><br><span class="line">$ npx create-nuxt-app@<span class="number">3.4</span><span class="number">.0</span> nuxt-learn</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.nuxt模式选择Universal</span></span><br><span class="line">   spa是单页，所以只有一个入口文件，不利于搜索引擎收录</span><br><span class="line">   Universal 通用app，服务器渲染的 Vue.js 应用程序也可以被认为是<span class="string">&quot;同构&quot;</span>或<span class="string">&quot;通用&quot;</span>，因为应用程序的大部分代码都可以在服务器和客户端上运行</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.注意不要选择pretty(会和eslint冲突)</span></span><br><span class="line">    我们都知道，如何与团队其他人高效地进行协作开发是多人团队的一个痛点。</span><br><span class="line">    每个人都有独立的编码习惯，虽然团队可以通过制定强制执行的规范来保持大家代码风格的尽量一致。</span><br><span class="line">    但是，在实际编码过程中，个人可能会不经意地继续使用着自己的代码风格，而等到发现不一致再解决又未免有点迟。</span><br><span class="line">    而ESLint正是为解决这类问题而生的。ESLint 由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， <span class="number">2013</span> 年发布第一个版本，t是一款当前应用十分广泛的JavaScript代码检查工具</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.npm run dev</span></span><br><span class="line">   访问  http:<span class="comment">//localhost:3000/</span></span><br></pre></td></tr></table></figure><h3 id="1-3-Nuxt基本使用"><a href="#1-3-Nuxt基本使用" class="headerlink" title="1.3 Nuxt基本使用"></a>1.3 Nuxt基本使用</h3><h4 id="a-路由"><a href="#a-路由" class="headerlink" title="a) 路由"></a>a) 路由</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pages文件夹下面，文件名即路由</span></span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span>pages下新建search.vue</span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    这是search页面</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>index.vue使用路由</span><br><span class="line">&lt;nuxt-link to=<span class="string">&quot;/search&quot;</span>&gt;到search页面&lt;/nuxt-link&gt;</span><br></pre></td></tr></table></figure><h4 id="b-嵌套子模板"><a href="#b-嵌套子模板" class="headerlink" title="b) 嵌套子模板"></a>b) 嵌套子模板</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#index.vue</span></span><br><span class="line"></span><br><span class="line">#<span class="number">1.</span><span class="keyword">template</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">      &lt;section <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;Logo/&gt;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span> javascript</span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Logo from <span class="string">&#x27;~/components/Logo.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue.extend(&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    Logo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="c-layouts布局文件"><a href="#c-layouts布局文件" class="headerlink" title="c) layouts布局文件"></a>c) layouts布局文件</h4><p>默认情况下所有的页面都会默认使用layouts下面default.vue这个布局文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#default.vue</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;头部&lt;/h1&gt;</span><br><span class="line">    &lt;!--nuxt就相当于 router-view--&gt;</span><br><span class="line">    &lt;nuxt/&gt;                     </span><br><span class="line">    &lt;h1&gt;尾巴&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line">​</span><br><span class="line">#自定义布局文件</span><br><span class="line">#<span class="number">1.l</span>ayouts下新建一个user.vue</span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;用户页面头部&lt;/h1&gt;</span><br><span class="line">    &lt;nuxt/&gt;</span><br><span class="line">    &lt;h1&gt;用户页面底部&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;css&quot;</span> scoped&gt;</span><br><span class="line">  h1&#123;</span><br><span class="line">    color:green</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>pages下的search.vue指定使用哪个布局文件</span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue.extend(&#123;</span><br><span class="line">  layout:<span class="string">&quot;user&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="d-全局的css文件"><a href="#d-全局的css文件" class="headerlink" title="d) 全局的css文件"></a>d) 全局的css文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>在assets下新建css/main.css</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>修改nuxt.config.css配置文件</span><br><span class="line">css: [</span><br><span class="line">    <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;~/assets/css/main.css&#x27;</span></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>重启服务</span><br></pre></td></tr></table></figure><h4 id="e-vuex的使用"><a href="#e-vuex的使用" class="headerlink" title="e) vuex的使用"></a>e) vuex的使用</h4><p>在nuxt中使用vuex的时候无需new Vue.Store实例，nuxt会帮我们自动创建。默认情况下，会使用index.js这个store</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>store/index.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = () =&gt; (&#123;</span><br><span class="line">  <span class="built_in">list</span>: [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">  user:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.<span class="built_in">list</span>.push(text);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>store/city.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = () =&gt; (&#123;</span><br><span class="line">  <span class="built_in">list</span>: [<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.<span class="built_in">list</span>.push(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>pages/city.vue</span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(item, idx) in $store.state.list&quot;</span> :key=<span class="string">&quot;idx&quot;</span>&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;增加信息index&quot;</span> @click=<span class="string">&quot;addIndex&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(item, idx) in $store.state.city.list&quot;</span> :key=<span class="string">&quot;idx&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; item &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;增加信息city&quot;</span> @click=<span class="string">&quot;addCity&quot;</span> /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> Vue from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue.extend(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="built_in">list</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addIndex() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">&quot;increment&quot;</span>, <span class="string">&quot;kk&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    addCity() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">&quot;city/increment&quot;</span>, <span class="string">&quot;jj&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-SPA-SEO-SSR"><a href="#1-4-SPA-SEO-SSR" class="headerlink" title="1.4 SPA\SEO\SSR"></a>1.4 SPA\SEO\SSR</h3><h4 id="1-4-1-SPA-单页面应用"><a href="#1-4-1-SPA-单页面应用" class="headerlink" title="1.4.1 SPA:单页面应用"></a>1.4.1 SPA:单页面应用</h4><p>SPA 时代，主要是在客户端端使用了history或hash（主要是为了低版本浏览器的兼容）API，在首次请求经服务端路由输出整个应用程序后，接下来的路由都由前端掌控了，前端通过路由作为中心枢纽控制一系列页面（组件）的渲染(DOM的生成)加载和数据交互。</p><p>优点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">页面之间的切换非常快</span><br><span class="line">一定程度减少了后端服务器的压力</span><br><span class="line">后端程序只需要提供api，不需要客户端到底是web端还是手机等</span><br></pre></td></tr></table></figure><p>缺点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">首屏打开速度很慢，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后在客户端渲染页面。</span><br><span class="line">不利于SEO搜索引擎优化</span><br></pre></td></tr></table></figure><h4 id="1-4-2-SEO-搜索引擎优化"><a href="#1-4-2-SEO-搜索引擎优化" class="headerlink" title="1.4.2 SEO:搜索引擎优化"></a>1.4.2 SEO:搜索引擎优化</h4><p>SEO是一种通过了解搜索引擎的运作规则（如何抓取网站页面，如何索引以及如何根据特定的关键字展现搜索结果排序等）来调整网站，以提高该网站在搜索引擎中某些关键词的搜索结果排名。</p><p>我们之前说SPA单页面应用，通过AJAX获取数据，这就难保证我们的页面能被搜索引擎正常收到，并且有一些搜索引擎不支持执行js和通过ajax获取数据，那就更不用提SEO了。为了解决这个问题，SSR登场了</p><h4 id="1-4-3-SSR-服务器端渲染"><a href="#1-4-3-SSR-服务器端渲染" class="headerlink" title="1.4.3 SSR:服务器端渲染"></a>1.4.3 SSR:服务器端渲染</h4><p>为了解决SPA不支持SEO的问题，我们也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，但是这样的HTML页面还不具备交互能力，所以还需要与SPA框架配合，在浏览器上“混合”成可交互的应用程序。</p><p>基本流程是：</p><p>在浏览器第一次访问某个 URI 资源的时候（首屏），Web 服务器根据路由拿到对应数据渲染并输出，且输出的数据中包含两部分：</p><p>路由页对应的页面及已渲染好的数据<br>完整的SPA程序代码<br>在客户端首屏渲染完成之后，此时我们看到的其实已经是一个和之前的 SPA 相差无几的应用程序了，接下来我们进行的任何操作都只是客户端的应用进行交互，页面/组件由Web端渲染，路由也由浏览器控制，用户只需要和当前浏览器内的应用打交道就可以了。<br>SSR优点</p><p>更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。<br>更快的内容到达时间(time-to-content)，不用等待所有的JS都下载完成，浏览器便能显示比较完整的页面了<br>SSR缺点</p><p>占用更多的cpu和内存资源<br>一些常用的浏览器的api可能无法正常使用，比如window，document，alert等，如果使用的话需要对运行环境加以判断<br>开发调试会有一些麻烦，因为涉及到了浏览器及服务器，对于SPA的一些组件的生命周期的管理会变得复杂</p><h4 id="1-4-4-Nuxt对SSR支持"><a href="#1-4-4-Nuxt对SSR支持" class="headerlink" title="1.4.4 Nuxt对SSR支持"></a>1.4.4 Nuxt对SSR支持</h4><p>从头搭建一个服务端渲染的应用是相当复杂的。幸运的是，我们有一个优秀的社区项目 Nuxt.js 让这一切变得非常简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。</p><p>Nuxt.js 是使用 Webpack 和 Node.js 进行封装的基于Vue的SSR框架，预设了利用Vue.js开发服务端渲染的应用所需要的各种配置，使用它你可以不需要自己搭建一套 SSR 程序，而是通过其约定好的文件结构和API就可以实现一个首屏渲染的 Web 应用。</p><p>Nuxt.js 主要关注的是应用的 UI渲染。</p><p><a href="https://juejin.im/post/58ff960ba22b9d0065b722cd">https://juejin.im/post/58ff960ba22b9d0065b722cd</a></p><h3 id="1-5-数据预取"><a href="#1-5-数据预取" class="headerlink" title="1.5 数据预取"></a>1.5 数据预取</h3><h4 id="1-5-1-准备服务器接口"><a href="#1-5-1-准备服务器接口" class="headerlink" title="1.5.1 准备服务器接口"></a>1.5.1 准备服务器接口</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>在根目录创建api文件夹，创建city.js</span><br><span class="line"><span class="keyword">const</span> bodyParser = require(<span class="string">&quot;body-parser&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app = require(<span class="string">&quot;express&quot;</span>)()</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/info&#x27;</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> res.status(<span class="number">200</span>).json([<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;天津&#x27;</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.exports = app</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>nuxt.config.js中添加配置如下</span><br><span class="line"><span class="comment">//https://zh.nuxtjs.org/guides/configuration-glossary/configuration-servermiddleware/</span></span><br><span class="line">  serverMiddleware: [</span><br><span class="line">    &#123; path: <span class="string">&quot;/api&quot;</span>, handler: <span class="string">&quot;~/api/city.js&quot;</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>重启服务 访问接口</span><br><span class="line">  localhost:<span class="number">3000</span>/api/info  测试接口</span><br></pre></td></tr></table></figure><h4 id="1-5-2-不使用数据预取"><a href="#1-5-2-不使用数据预取" class="headerlink" title="1.5.2 不使用数据预取"></a>1.5.2 不使用数据预取</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>客户端pages下新建city.vue</span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">&quot;(item,idx) in list&quot;</span></span><br><span class="line">        :key=<span class="string">&quot;idx&quot;</span>&gt; &#123;&#123; item &#125;&#125; &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> axios from <span class="string">&quot;axios&quot;</span></span><br><span class="line">  <span class="keyword">import</span> Vue from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue.extend(&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="built_in">list</span>:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    async mounted()&#123;</span><br><span class="line">      let &#123;status,data&#125; = await axios.get(<span class="string">&quot;/api/info&quot;</span>);</span><br><span class="line">      <span class="keyword">this</span>.<span class="built_in">list</span> = data;</span><br><span class="line">      console.<span class="built_in">log</span>(<span class="keyword">this</span>.<span class="built_in">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-3-Nuxt-js工作流"><a href="#1-5-3-Nuxt-js工作流" class="headerlink" title="1.5.3 Nuxt.js工作流"></a>1.5.3 Nuxt.js工作流</h4><p>nuxtServerInit：如果在状态树(store)中指定了 nuxtServerInit 方法，Nuxt.js 调用它的时候会将页面的上下文对象作为第2个参数传给它（仅在服务端调用）。当我们想将服务端的一些数据传到客户端时，这个方法是非常好用的</p><p>middleware：中间件允许您定义一个自定义函数运行在一个页面或一组页面渲染之前，服务端首屏渲染和路由跳转前均执行对应中间件。可以用作页面跳转时验证用户信息操作(登陆拦截)。</p><p>asyncData会在组件加载前（限于页面组件）调用，可以在服务端首屏渲染或者在路由跳转时执行，专门用来请求数据，Nuxt.js 会将 asyncData 返回的数据融合组件 data 方法返回的数据一并返回给当前组件。asyncData应该是用于影响SEO的内容，也就是需要让爬虫读取的内容。</p><h4 id="1-5-4-数据预取"><a href="#1-5-4-数据预取" class="headerlink" title="1.5.4 数据预取"></a>1.5.4 数据预取</h4><h5 id="a-nuxtServerInit"><a href="#a-nuxtServerInit" class="headerlink" title="a) nuxtServerInit"></a>a) nuxtServerInit</h5><p>nuxtServerInit可以将服务端的数据通过vuex同步到客户端，该方法仅会在服务端首屏渲染时执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#store/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = () =&gt; (&#123;</span><br><span class="line">  <span class="built_in">list</span>: [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">  user:&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  increment (state,text) &#123;</span><br><span class="line">    state.<span class="built_in">list</span>.push(text);</span><br><span class="line">  &#125;,</span><br><span class="line">  setlist (state,text) &#123;</span><br><span class="line">    text.forEach(item=&gt;&#123;</span><br><span class="line">      state.<span class="built_in">list</span>.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">//将菜单信息写入到vuex实例中</span></span><br><span class="line">  async nuxtServerInit (&#123; commit &#125;, &#123; req ,app &#125;) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      let &#123;status, data&#125; = await app.$axios.get(<span class="string">&quot;/api/info&quot;</span>);</span><br><span class="line">      commit(<span class="string">&#x27;setlist&#x27;</span>, data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>pages/city.vue</span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page is city</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">&quot;(item,idx) in $store.state.list&quot;</span></span><br><span class="line">        :key=<span class="string">&quot;idx&quot;</span>&gt; &#123;&#123; item &#125;&#125; &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="b-asyncData和fetch方法"><a href="#b-asyncData和fetch方法" class="headerlink" title="b) asyncData和fetch方法"></a>b) asyncData和fetch方法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用asyncData进行ssr渲染</span></span><br><span class="line"><span class="function">async <span class="title">asyncData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//给data取别名，请求网址写全，因为在刷新浏览器的时候需要全路径请求服务器</span></span><br><span class="line">    let &#123;status,data:<span class="built_in">list</span>&#125; = await axios.get(<span class="string">&quot;http://127.0.0.1:3000/city/info&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">//这边不能使用this.list = list,因为获取不到this</span></span><br><span class="line">        <span class="comment">//通过return给页面返回数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="built_in">list</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async fetch (&#123; store, params &#125;)&#123;</span><br><span class="line">      <span class="comment">//当页面加载时触发可以执行请求来触发action来修改state</span></span><br><span class="line">      <span class="comment">//不可以return数据给页面</span></span><br><span class="line">      <span class="comment">//页面可以从this.$store中获取action修改的state</span></span><br><span class="line">      let &#123;status,data:<span class="built_in">list</span>&#125; = await axios.get(<span class="string">&quot;http://127.0.0.1:3000/city/info&quot;</span>);</span><br><span class="line">      store.commit(<span class="string">&#x27;setlist&#x27;</span>, <span class="built_in">list</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#注意点：asyncData 和 fetch都只能够在页面组件中使用，如果想要在页面组件的子组件中使用ssr，可以使用nuxtServerInit</span><br><span class="line">#注意点：由于 asyncData方法是在组件初始化前被调用的，所以在方法内是没有办法通过<span class="keyword">this</span>来引用组件的实例。</span><br><span class="line">#注意点：当用户请求页面时候服务端会先使用SSR来生成对应的页面文档结构，而在用户切换路由则是使用了SPA的模式。这意味着如果用户刷新页面，asyncData方法会在服务端执行；如果用户通过nuxt-link路由导航到当前页面，asyncData会在客户端执行</span><br></pre></td></tr></table></figure><h5 id="c-asyncData运行在服务器和客户端的区分"><a href="#c-asyncData运行在服务器和客户端的区分" class="headerlink" title="c) asyncData运行在服务器和客户端的区分"></a>c) asyncData运行在服务器和客户端的区分</h5><p>当asyncData方法是由路由跳转触发的时候，则使用客户端数据预取，asyncData方法会在客户端执行。可以通过控制台打印来查看是在浏览器执行还是在node执行就可以验证了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://zh.nuxtjs.org/api/#asyncdata-%E6%96%B9%E6%B3%95</span></span><br><span class="line"></span><br><span class="line"><span class="function">async <span class="title">asyncData</span><span class="params">(context)</span></span>&#123;</span><br><span class="line">    <span class="comment">//给data取别名，请求网址写全</span></span><br><span class="line">    let &#123;status,data:<span class="built_in">list</span>&#125; = await axios.get(<span class="string">&quot;http://127.0.0.1:3000/city/info&quot;</span>);</span><br><span class="line">    <span class="comment">//如果是客户端执行，则可以使用window对象</span></span><br><span class="line">    <span class="comment">//如果是服务端执行，则没有window对象</span></span><br><span class="line">    <span class="keyword">if</span>(process.client)&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(window)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">//这边不能使用this.list = list,因为获取不到this</span></span><br><span class="line">        <span class="comment">//通过return给页面返回数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="built_in">list</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-SSR原理"><a href="#1-6-SSR原理" class="headerlink" title="1.6 SSR原理"></a>1.6 SSR原理</h3><p>官方文档:<a href="https://ssr.vuejs.org/zh/">https://ssr.vuejs.org/zh/</a></p><p>服务端渲染：Server Bundle用于服务端渲染，主要是获取异步数据，同步到组件中，并将组件渲染成HTML返回到前端，但是vue-ssr不能绑定javascript事件，也就是说服务器端使用vue-ssr渲染出来的返回到浏览器的也只能是HTML+CSS。</p><p>客户端渲染：Client Bundle 用于客户端渲染，之前说过服务器不能增加事件，那只能前端增加。所以我们看到SSR渲染的网页源码中有window.<strong>NUXT</strong>=…代码，这是后端和前端在使用vuex共享数据。后端从vuex里面取到数据之后渲染成真正的HTML和css返回。客户端也是从vuex里面取到数据，客户端的渲染主要做2件事：</p><p>1.拿到数据，使用 virtual-dom进行预渲染，然后和服务端渲染出来的进行比对，比对两边渲染的内容是不是一致的</p><p>2.对DOM元素的事件进行绑定，也就是回答的问题，事件在这块进行的处理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/2021/09/19/%E5%93%88%E5%93%88%E5%93%88/"/>
      <url>/2021/09/19/%E5%93%88%E5%93%88%E5%93%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img0.baidu.com/it/u=1035958544,750693468&fm=253&fmt=auto&app=138&f=JPEG?w=888&h=500" alt="图片名称是八个字"></p><h2 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h2><h3 id="小程序开发环境配置"><a href="#小程序开发环境配置" class="headerlink" title="小程序开发环境配置"></a>小程序开发环境配置</h3><p>1、安装微信开发者工具<br>2、扫一扫进入开发者工具<br>3、新建项目<br>4、安装vscode插件<br>5、初始化项目</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="使用动态数据"><a href="#使用动态数据" class="headerlink" title="使用动态数据"></a>使用动态数据</h3><p>使用插值表达式在页面渲染数据，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.index.js  配置</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:<span class="string">&quot;wechat&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.index.wxml</span></span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//插值表达式  可以使用变量,使用表达式</span></span><br><span class="line">     &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>通过可以获取到index.js里data里属性msg的属性值，并将其渲染到界面</p><h3 id="列表渲染-wx-for"><a href="#列表渲染-wx-for" class="headerlink" title="列表渲染 wx:for"></a>列表渲染 wx:for</h3><p>wx:for类似于一个循环，将要循环的数组内需要的对象属性渲染到相应位置，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    friends: [</span><br><span class="line">      &#123; id: <span class="number">1000</span>, title: <span class="string">&quot;h6&quot;</span> &#125;,</span><br><span class="line">      &#123; id: <span class="number">1001</span>, title: <span class="string">&quot;html&quot;</span> &#125;,</span><br><span class="line">      &#123; id: <span class="number">1002</span>, title: <span class="string">&quot;css&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.wmxl</span></span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;container&quot;</span> wx:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;friends&#125;&#125;&quot;</span> wx:key=<span class="string">&quot;&#123;&#123;id&#125;&#125;&quot;</span>&gt;</span><br><span class="line">  &#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>使用wx:for=”“对frinends这个data里的friends数组进行循环，并通过item.属性名将相应的属性值的循环结果呈现在界面</p><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><p>使用bindtap在相应的标签内绑定相应的事件</p><p>举个例子：通过点击页面中的字来改变它的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg:<span class="string">&quot;hello world&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;view bindtap=<span class="string">&quot;handleClick&quot;</span>&gt;</span><br><span class="line">  &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>页面的数据应该是hello world，我们现在在数据的view标签上绑定了一个事件handleClick,接下来我们在js内设置这个事件的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg:<span class="string">&quot;hello world&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  handleClick()&#123;</span><br><span class="line">  <span class="comment">//this.setData() 设置data中的值</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        msg:<span class="string">&quot;change&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在handleClick事件内我们使用this.setData()设置data里的属性的属性值，将呈现在页面的msg属性改为“change”，此时点击的时候触发点击事件就会改变页面的字为“change”了</p><h2 id="自定义属性的设置和获取"><a href="#自定义属性的设置和获取" class="headerlink" title="自定义属性的设置和获取"></a>自定义属性的设置和获取</h2><h3 id="自定义属性的设置"><a href="#自定义属性的设置" class="headerlink" title="自定义属性的设置"></a>自定义属性的设置</h3><p>使用data-自定义属性名来自定义一个属性，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.data-id 设置一个自定义属性id</span></span><br><span class="line">&lt;view data-id=<span class="string">&quot;&#123;&#123;id&#125;&#125;&quot;</span> bindtap=<span class="string">&quot;handleClick&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>在这个使用data-id自定义属性id,并且将data内的id值传给这个自定义属性，比如在data里设定id值为1001</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">        id:<span class="number">1001</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义属性的获取"><a href="#自定义属性的获取" class="headerlink" title="自定义属性的获取"></a>自定义属性的获取</h3><p>通过以上例子已经设置好了一个自定义属性并且把已有的id的值传给了这个自定义属性，接下来我们怎么获取这个值呢？我们通过一个点击事件来演示一下这个自定义属性值的获取：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">        id:<span class="number">1001</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    handleClick(event)&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(event)</span><br><span class="line">        console.<span class="built_in">log</span>(event.currentTarget.dataset)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过在点击事件传一个event参数<br>我们通过打印event可以看到一些已有的属性<br>微信小程序event.png<br>微信小程序event.png</p><p>在event.currentTarget里可以看到一些现成的数据，其中dataset里就是自己设置的自定义属性的值了<br>event.currentTargrt.dataset.png<br>event.currentTargrt.dataset.png</p><p>此时可以看到id确实在这里面，通过打印event.currentTarget.dataset.id就可以获得1001了</p><h3 id="获取data中的值"><a href="#获取data中的值" class="headerlink" title="获取data中的值"></a>获取data中的值</h3><p>通过this.data.属性就可以获得到data 内相应的属性了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:<span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    arr:[&#123;id:<span class="number">1</span>,title:<span class="string">&quot;xxx&quot;</span>&#125;,&#123;id:<span class="number">2</span>,title:<span class="string">&quot;yyy&quot;</span>&#125;,    &#123;id:<span class="number">3</span>,title:<span class="string">&quot;zzz&quot;</span>&#125;],</span><br><span class="line">    id:<span class="number">1001</span></span><br><span class="line">  &#125;,</span><br><span class="line">  handleClick(event)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">this</span>.data.arr[<span class="number">2</span>].title);        <span class="comment">//zzz</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="列表删除"><a href="#列表删除" class="headerlink" title="列表删除"></a>列表删除</h3><p>通过以上的学习我们已经使用wx:for=”“,将数组内的数据循环渲染到了界面，我们这时候需要使用到自定义属性，通过自定义属性传一个当前循环的属性，通过这个属性值和循环的数组内的属性的相应属性值比对，找到相同的排除，保留点击相同的就可以实现点击删除了。</p><h3 id="1、首先先循环渲染页面"><a href="#1、首先先循环渲染页面" class="headerlink" title="1、首先先循环渲染页面"></a>1、首先先循环渲染页面</h3><p>使用wx:for=”“</p><h3 id="2、设置一个自定义属性，绑定点击事件"><a href="#2、设置一个自定义属性，绑定点击事件" class="headerlink" title="2、设置一个自定义属性，绑定点击事件"></a>2、设置一个自定义属性，绑定点击事件</h3><p>设置自定义属性data-id=”“，将自定义属性的值设置为循环的当前id，这样我们就可以通过事件得到当前点击的id并和原数据内的数据比对了</p><p>以上两步完成代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    msg:<span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    arr:[</span><br><span class="line">        &#123;id:<span class="number">1</span>,title:<span class="string">&quot;xxx&quot;</span>&#125;,</span><br><span class="line">        &#123;id:<span class="number">2</span>,title:<span class="string">&quot;yyy&quot;</span>&#125;,</span><br><span class="line">        &#123;id:<span class="number">3</span>,title:<span class="string">&quot;zzz&quot;</span>&#125;],</span><br><span class="line">    id:<span class="number">1001</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.wxml</span></span><br><span class="line">&lt;view wx:<span class="keyword">for</span>=<span class="string">&quot;&#123;&#123;arr&#125;&#125;&quot;</span> wx:key=<span class="string">&quot;&#123;&#123;item.idid&#125;&#125;&quot;</span>  data-id=<span class="string">&quot;&#123;&#123;item.id&#125;&#125;&quot;</span></span><br><span class="line">bindtap=<span class="string">&quot;handleClick&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;item.title&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>此时页面循环渲染结束</p><h3 id="3、通过点击事件和自定义属性删除相应属性"><a href="#3、通过点击事件和自定义属性删除相应属性" class="headerlink" title="3、通过点击事件和自定义属性删除相应属性"></a>3、通过点击事件和自定义属性删除相应属性</h3><p>因为一开始我们自定义属性绑定的就是相应的id属性，所以我们获取到点击的自定义属性的id值，和原有的数组内的id值比对，相同的过滤掉，就可以实现点击过滤效果，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">handleClick(event)&#123;</span><br><span class="line">    let arr2 = <span class="keyword">this</span>.data.arr.filter(value=&gt;&#123;</span><br><span class="line">      <span class="keyword">return</span> value.id != event.currentTarget.dataset.id</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      arr:arr2</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>event.currentTarget.dataset.id获得的就是点击的那条对象的id值，通过filter过滤掉</p><h3 id="4、最后将过滤后的结果返回给data"><a href="#4、最后将过滤后的结果返回给data" class="headerlink" title="4、最后将过滤后的结果返回给data"></a>4、最后将过滤后的结果返回给data</h3><p>上一段代码已经写出来了，通过this.setData将处理好的arr2传回data</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0</title>
      <link href="/2021/09/19/%E4%BD%A0%E5%A5%BD/"/>
      <url>/2021/09/19/%E4%BD%A0%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Vue-cli脚手架介绍"><a href="#1-Vue-cli脚手架介绍" class="headerlink" title="1. Vue/cli脚手架介绍"></a>1. Vue/cli脚手架介绍</h2><p>vue-cli是vue官网提供的一个脚手架，这个构建工具大大降低了webpack的使用难度，支持热更新，有webpack-dev-server的支持，相当于启动了一个请求服务器，给你搭建了一个测试环境，只关注开发就OK</p><h3 id="1-1-安装vue-cli创建Vue2-x项目"><a href="#1-1-安装vue-cli创建Vue2-x项目" class="headerlink" title="1.1 安装vue-cli创建Vue2.x项目"></a>1.1 安装vue-cli创建Vue2.x项目</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.之前安装过vue的2.0版本，你需要把2.0相关的删除  npm uni -g vue-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.安装vue/cli脚架  npm i -g @vue/cli@4.5.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.将配置环境变量  C:\dev\nodejs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.检查版本号,目前安装vuecli 4.5.8    vue -V</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.创建项目  vue create project-name</span></span><br><span class="line">    选择vue2x</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//查看最终生效的 webpack 配置信息</span><br><span class="line">vue inspect &gt; output.js</span><br><span class="line"></span><br><span class="line">//配置文件参考文档</span><br><span class="line">https://cli.vuejs.org/zh/config/#devserver-proxy</span><br><span class="line"></span><br><span class="line">//运行App</span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line">//编译App</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="1-2-windows-32位-npm装不上vue-cli的问题"><a href="#1-2-windows-32位-npm装不上vue-cli的问题" class="headerlink" title="1.2 windows(32位) npm装不上vue/cli的问题"></a>1.2 windows(32位) npm装不上vue/cli的问题</h3><ul><li>配置环境变量到path</li></ul><h3 id="1-3-vue-config-js配置"><a href="#1-3-vue-config-js配置" class="headerlink" title="1.3 vue.config.js配置"></a>1.3 vue.config.js配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官网配置： https://cli.vuejs.org/zh/config/#filenamehashing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = require(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//部署应用包时的基本URL，如果是生产环境，部署到 /cli-study/dist 路径；如果是开发环境，部署到根路径</span></span><br><span class="line">  publicPath: !debug</span><br><span class="line">      ? <span class="string">&#x27;/cli-study/dist&#x27;</span></span><br><span class="line">      : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="comment">//输出文件路径</span></span><br><span class="line">  outputDir: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">  <span class="comment">//放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录。</span></span><br><span class="line">  assetsDir: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">  <span class="comment">//默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存</span></span><br><span class="line">  filenameHashing: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">  lintOnSave: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 是否使用包含运行时编译器的Vue构建版本，设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。</span></span><br><span class="line">  runtimeCompiler: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 默认情况下 babel-loader 会忽略所有 node_modules 中的文件。如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来。</span></span><br><span class="line">  transpileDependencies: [],</span><br><span class="line">  <span class="comment">// 生产环境不需要sourceMap</span></span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 官网：https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F</span></span><br><span class="line">  <span class="comment">// 更多配置参考：https://www.jb51.net/article/150844.htm</span></span><br><span class="line">  configureWebpack: config =&gt; &#123;</span><br><span class="line">    Object.assign(config, &#123; <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">          <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// webpack的链式操作，允许对内部的 webpack 配置进行更细粒度的修改</span></span><br><span class="line">  <span class="comment">// 参考： https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7</span></span><br><span class="line">  chainWebpack: (config) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">      <span class="comment">// 本地开发配置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 生产开发配置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// css的相关配置</span></span><br><span class="line">  css: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//所有 webpack-dev-server 的选项都支持</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    host: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    https: <span class="literal">false</span>,</span><br><span class="line">    hotOnly: <span class="literal">false</span>,</span><br><span class="line">    proxy: null,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第三方插件配置</span></span><br><span class="line">  pluginOptions: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-4-Eslint格式化-vue文件"><a href="#1-4-Eslint格式化-vue文件" class="headerlink" title="1.4 Eslint格式化.vue文件"></a>1.4 Eslint格式化.vue文件</h3><p>ESLint是一个用来识别 ECMAScript 并且按照规则给出报告的代码检测工具，使用它可以避免低级错误和统一代码的风格。</p><p>你可能有疑问，在.vue 文件中你怎么检验你的代码，因为它不是 。我们假设你使用 ESLint (如果你没有使用话，你应该去使用！)。</p><p>你还需要官方的 eslint-plugin-vue，它支持同时检查你.vue文件中的模板和脚本。</p><p><a href="https://vue-loader-v14.vuejs.org/zh-cn/workflow/linting.html">https://vue-loader-v14.vuejs.org/zh-cn/workflow/linting.html</a></p><h3 id="eslint配置-rules规则"><a href="#eslint配置-rules规则" class="headerlink" title="eslint配置(rules规则)"></a>eslint配置(rules规则)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭必须使用单引号</span></span><br><span class="line"><span class="string">&quot;quotes&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;single&quot;</span>],</span><br><span class="line"><span class="comment">// 允许多余的换行</span></span><br><span class="line"><span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;error&#x27;</span> : <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;prefer-promise-reject-errors&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;space-unary-ops&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;no-unused-expressions&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;no-useless-return&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;standard/no-callback-literal&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;import/first&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;import/export&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;no-mixed-operators&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&#x27;no-use-before-define&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许使用分号</span></span><br><span class="line"><span class="string">&#x27;semi&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用==</span></span><br><span class="line"><span class="string">&#x27;eqeqeq&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进使用不做限制</span></span><br><span class="line"><span class="string">&#x27;indent&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用tab</span></span><br><span class="line"><span class="string">&#x27;no-tabs&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数圆括号之前没有空格</span></span><br><span class="line"><span class="string">&#x27;space-before-function-paren&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要求块内空格填充格式</span></span><br><span class="line"><span class="string">&#x27;padded-blocks&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不限制变量一起声明</span></span><br><span class="line"><span class="string">&#x27;one-var&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件语句中复制操作符需要用圆括号括起来</span></span><br><span class="line"><span class="string">&#x27;no-cond-assign&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;except-parens&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许使用条件表达式使用常量</span></span><br><span class="line"><span class="string">&#x27;no-constant-condition&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行可忽略大括号，多行不可忽略</span></span><br><span class="line"><span class="string">&#x27;curly&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;multi-line&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许使用var变量</span></span><br><span class="line"><span class="string">&#x27;no-var&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许出现多个空格</span></span><br><span class="line"><span class="string">&#x27;no-multi-spaces&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, &#123; ignoreEOLComments: <span class="literal">true</span> &#125;],</span><br><span class="line"><span class="string">&#x27;camelcase&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象字面量的键值空格风格</span></span><br><span class="line"><span class="string">&#x27;key-spacing&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// if语句包含一个return语句， else就多余</span></span><br><span class="line"><span class="string">&#x27;no-else-return&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议将经常出现的数字提取为变量</span></span><br><span class="line"><span class="string">&#x27;no-magic-numbers&#x27;</span>: [<span class="number">0</span>, &#123; ignoreArrayIndexes: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许重复声明变量</span></span><br><span class="line"><span class="string">&#x27;no-redeclare&#x27;</span>: [<span class="number">2</span>, &#123; builtinGlobals: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数风格</span></span><br><span class="line"><span class="string">&#x27;wrap-iife&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;inside&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许圆括号中出现空格</span></span><br><span class="line"><span class="string">&#x27;space-in-parens&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保运算符周围有空格</span></span><br><span class="line"><span class="string">&#x27;space-infix-ops&#x27;</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制点号与属性同一行</span></span><br><span class="line"><span class="string">&#x27;dot-location&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;property&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制单行代码使用空格</span></span><br><span class="line"><span class="string">&#x27;block-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束for-in使用hasOwnProperty判断</span></span><br><span class="line"><span class="string">&#x27;guard-for-in&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用one true brace style大括号风格</span></span><br><span class="line"><span class="string">&#x27;brace-style&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;1tbs&#x27;</span>, &#123; <span class="string">&#x27;allowSingleLine&#x27;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一逗号周围空格风格</span></span><br><span class="line"><span class="string">&#x27;comma-spacing&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止出现多个空行</span></span><br><span class="line"><span class="string">&#x27;no-multiple-empty-lines&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;max&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;maxEOF&#x27;</span>: <span class="number">2</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许箭头函数不使用圆括号</span></span><br><span class="line"><span class="string">&#x27;arrow-parens&#x27;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规范generator函数的使用</span></span><br><span class="line"><span class="string">&#x27;generator-star-spacing&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求在块级</span></span><br><span class="line"><span class="string">&#x27;lines-around-comment&#x27;</span>: [<span class="number">2</span>, &#123; <span class="string">&#x27;beforeBlockComment&#x27;</span>: <span class="literal">true</span>, <span class="string">&#x27;afterBlockComment&#x27;</span>: <span class="literal">false</span>, <span class="string">&#x27;beforeLineComment&#x27;</span>: <span class="literal">true</span>, <span class="string">&#x27;afterLineComment&#x27;</span>: <span class="literal">false</span> &#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;off&quot;</span>或者<span class="number">0</span>，不启用这个规则</span><br><span class="line"><span class="string">&quot;warn&quot;</span>或者<span class="number">1</span>，出现问题会有警告</span><br><span class="line"><span class="string">&quot;error&quot;</span>或者<span class="number">2</span>，出现问题会报错</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vscode中通过  npm run lint会自动进行eslint的校验和修正</span><br><span class="line">npm run lint --fix</span><br></pre></td></tr></table></figure><h2 id="2-Vue3-0介绍"><a href="#2-Vue3-0介绍" class="headerlink" title="2. Vue3.0介绍"></a>2. Vue3.0介绍</h2><p>官方文档：<a href="https://vue-docs-next-zh-cn.netlify.app/-">https://vue-docs-next-zh-cn.netlify.app/-</a> - guide/installation.html</p><h3 id="2-1-Vue3-0-项目创建"><a href="#2-1-Vue3-0-项目创建" class="headerlink" title="2.1 Vue3.0 项目创建"></a>2.1 Vue3.0 项目创建</h3><p>创建:在命令窗口输入指令</p><ul><li>vue create 项目名称    </li><li>//选择vue3.x</li><li>//选择less</li></ul><h3 id="2-2-Vue-composition-API-函数式api"><a href="#2-2-Vue-composition-API-函数式api" class="headerlink" title="2.2 Vue composition API (函数式api)"></a>2.2 Vue composition API (函数式api)</h3><p>vue 3.0 的 Composition API 带来的最大的特性，就是函数组件。通过函数组件，我们可以体会到类似 react 编程的愉悦。</p><p>使用传统的option配置方法写组件的时候问题，随着业务复杂度越来越高，代码量会不断的加大；由于相关业务的代码需要遵循option的配置写到特定的区域(data、methods、computed)，导致后续维护非常的复杂，同时代码可复用性不高，而composition-api就是为了解决这个问题而生的</p><p>vue3.0 侧重于解决代码组织与逻辑复用问题</p><h3 id="2-2-1-defineComponent"><a href="#2-2-1-defineComponent" class="headerlink" title="2.2.1 defineComponent"></a>2.2.1 defineComponent</h3><p>在结合了 TypeScript 的情况下，传统的 Vue.extend 等定义方法无法对组件给出正确的参数类型推断，这就需要引入 defineComponent() 组件包装函数</p><h3 id="2-2-2-setup"><a href="#2-2-2-setup" class="headerlink" title="2.2.2 setup"></a>2.2.2 setup</h3><p>vue3.0将组件的逻辑都写在了函数内部，setup()会取代vue2.x的data()函数，返回一个对象暴露给模板。</p><p>setup函数的特性：</p><ul><li>使用Composition API 的入口</li><li>在beforeCreate之前调用</li><li>在setup中没有this (函数组件)</li><li>可以返回一个对象，这个对象的属性被合并到渲染上下文，并可以在模板中直接使用；</li><li>接收props对象作为第一个参数，接收来的props对象，可以通过watch监视其变化。</li><li>接受context对象作为第二个参数，这个对象包含attrs，slots，emit三个属性。</li></ul><p>setup 函数是个新的入口函数，相当于 vue2.x 中 beforeCreate 和 created，在 beforeCreate 之后 created 之前执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&quot;张晓明&quot;</span>;</span><br><span class="line">    let age = <span class="number">18</span>;</span><br><span class="line">    <span class="function">function <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        age += <span class="number">1</span>;</span><br><span class="line">        console.<span class="built_in">log</span>(age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; msg, age, add &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    姓名:&#123;&#123;msg&#125;&#125;</span><br><span class="line">    年龄:&#123;&#123;age&#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;add&quot;</span>&gt;点我年龄加<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据绑定的用法和之前vue语法一致</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-ref"><a href="#2-2-3-ref" class="headerlink" title="2.2.3 ref"></a>2.2.3 ref</h3><p>ref可以让某一个变量具备响应式的能力</p><p>ref 注意点:</p><ul><li>在 VUE 的模板中使用 ref 的值不需要通过 value 获取 （Vue 会通过自动给 ref 的值加上 .value）</li><li>在 js 中使用 ref 的值必须使用 .value 获取<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = ref(<span class="string">&quot;张晓明&quot;</span>);</span><br><span class="line">    let age = ref(<span class="number">18</span>);</span><br><span class="line">    <span class="function">function <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      age.value += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; msg, age, add &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-4-reactive"><a href="#2-2-4-reactive" class="headerlink" title="2.2.4 reactive"></a>2.2.4 reactive</h3><p>经过reactive函数处理后的对象能变成响应式的对象，类似于- option api里面的data属性的值，它主要是处理你的对象让它经过 Proxy 的加工变为一个响应式的对象。</p><p>注意点：</p><ul><li>如果想要保持对象内容的响应式能力，在 return 的时候必须把整个 reactive() 对象返回出去</li><li>在引用的时候也必须对整个对象进行引用而无法解构，否则这个对象内容的响应式能力将会丢失。</li><li>Vue2.x版本中 Vue 使用了 Object.defineProperty() 来劫持数据变化，Vue3.0中使用 Proxy 来劫持数据变化<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    名字:&#123;&#123; state.name &#125;&#125; 价格:&#123;&#123; state.price &#125;&#125;</span><br><span class="line">    购买数量:&#123;&#123;state.count&#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;add&quot;</span>&gt;点我加<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, reactive &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">defineComponent</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  components: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  setup() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//响应式对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> state = reactive(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      count: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      name:<span class="string">&quot;商品1&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      price:<span class="number">100</span></span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//修改响应式对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    function add() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      state.count += <span class="number">1</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> &#123; state, add &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-toRefs"><a href="#2-2-5-toRefs" class="headerlink" title="2.2.5 toRefs"></a>2.2.5 toRefs</h3>但是在具体的业务中，如果无法使用解构取出 reactive() 对象的值，每次都需要通过 state. 操作符访问它里面的属性会是非常麻烦的，所以官方提供了 toRefs() 函数来为我们填好这个坑。只要使用 toRefs() 把 reactive() 对象包装一下，就能够通过解构单独使用它里面的内容了，而此时的内容也依然维持着响应式的特性。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    名字:&#123;&#123; name &#125;&#125; 价格:&#123;&#123; price &#125;&#125;</span><br><span class="line">    购买数量:&#123;&#123;count&#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;add&quot;</span>&gt;点我加<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, reactive,toRefs &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">defineComponent</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  components: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  setup() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//响应式对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> state = reactive(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      count: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      name:<span class="string">&quot;商品1&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      price:<span class="number">100</span></span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//修改响应式对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    function add() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      state.count += <span class="number">1</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> &#123; ...toRefs(state), add &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-watch和computed"><a href="#2-2-6-watch和computed" class="headerlink" title="2.2.6 watch和computed"></a>2.2.6 watch和computed</h3><p>computed：该函数用来创造计算属性，和过去一样，它返回的值是一个ref对象。里面可以传方法，或者一个对象，对象中包含set()、get()方法</p><p>watch：属性监听，支持传三个参数</p><ul><li>想监听的数据，可以是数组形势，传入多个</li><li>监听数据的回调函数，该回调的参数有两个，前一个是newValue，后一个是oldValue，每一个都可以是一个数组，与之前的多个监听对应</li><li>监听的配置参数 是一个对象，如{ immediate: true }，这样可以让初次挂在时执行watch的回调<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    名字:&#123;&#123; name &#125;&#125; 价格:&#123;&#123; price &#125;&#125;</span><br><span class="line">    购买数量:&#123;&#123;count&#125;&#125;</span><br><span class="line">    双倍数量:&#123;&#123;<span class="keyword">double</span>&#125;&#125;</span><br><span class="line">    Title:&#123;&#123;title&#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;add&quot;</span>&gt;点我加<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;title = &#x27;123&#x27;&quot;</span>&gt;修改title&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, reactive,toRefs,computed,watch &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">defineComponent</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  components: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  setup() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//响应式对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> state = reactive(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      count: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      name:<span class="string">&quot;商品1&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      price:<span class="number">100</span></span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> title = ref(<span class="string">&quot;标题&quot;</span>)</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//计算属性</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> <span class="keyword">double</span> = computed(() =&gt; state.count * <span class="number">2</span>)</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//watch监听reactive数据</span></span></span></span><br><span class="line"><span class="params"><span class="function">    watch(()=&gt;state.count,(newCount,oldCount)=&gt;&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      console.<span class="built_in">log</span>(newCount,oldCount)</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;,&#123; immediate: <span class="literal">true</span> &#125;)</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//watch监听ref数据</span></span></span></span><br><span class="line"><span class="params"><span class="function">    watch(title,()=&gt;&#123;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//watch监听一组数据变化</span></span></span></span><br><span class="line"><span class="params"><span class="function">    watch([title,()=&gt;state.count],([newTitle,newCount],[oldTitle,oldCount])=&gt;&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      console.<span class="built_in">log</span>(newTitle,newCount)</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//修改响应式对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    function add() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      state.count += <span class="number">1</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> &#123; ...toRefs(state),<span class="keyword">double</span>, add,title &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-7-props-和-context"><a href="#2-2-7-props-和-context" class="headerlink" title="2.2.7 props 和 context"></a>2.2.7 props 和 context</h3>在 Vue2.0 中我们可以使用 props 属性值完成父子通信，在这里我们需要定义 props 属性去定义接受值的类型，然后我们可以利用 setup 的第一个参数获取 props 使用。</li></ul><p>a) 父传子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    &lt;HelloWorld :msg=<span class="string">&quot;title&quot;</span>&gt;&lt;/HelloWorld&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;title = &#x27;123&#x27;&quot;</span>&gt;修改title&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, reactive, toRefs, computed, watch, onMounted &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> HelloWorld from <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">defineComponent</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  components: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    HelloWorld</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  setup() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> title = ref(<span class="string">&quot;标题&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> &#123;  title &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref,watch &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">defineComponent</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="string">&quot;HelloWorld&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  props: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    msg: String,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  setup(props) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//监听props中的msg变化</span></span></span></span><br><span class="line"><span class="params"><span class="function">    watch(()=&gt;props.msg,(newVal)=&gt;&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      console.<span class="built_in">log</span>(newVal)</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;)</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>b) 子传父</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> title = ref(<span class="string">&quot;标题&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> receiveFromChild = (msg: any) =&gt; &#123;</span><br><span class="line">        title.value = msg;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; title, receiveFromChild &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&lt;HelloWorld :msg=<span class="string">&quot;title&quot;</span> @func=<span class="string">&quot;receiveFromChild&quot;</span>&gt;&lt;/HelloWorld&gt;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;button @click=<span class="string">&quot;send&quot;</span>&gt;向父亲传递数据&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//setup 函数的第二个参数是一个上下文对象，这个上下文对象中包含了一些有用的属性(slot attrs emit)，这些属性在 Vue2.0 中需要通过 this 才能访问到，在 vue3.0中需要通过context来访问：</span></span><br><span class="line"><span class="comment">//注意 vue3.0中没有组件对象，不能通过this来访问组件对象</span></span><br><span class="line">setup(props,context) &#123;</span><br><span class="line">    <span class="keyword">const</span> send = ()=&gt;&#123;</span><br><span class="line">        context.emit(<span class="string">&quot;func&quot;</span>,<span class="string">&quot;孩子的数据&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;send&#125;</span><br><span class="line">&#125;,</span><br><span class="line">c) provide和inject</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent,provide &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">setup() &#123;</span><br><span class="line">    provide(<span class="string">&quot;list&quot;</span>,[<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, inject &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">list</span> = inject(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：provide和inject只能在setup()函数中使用</span></span><br></pre></td></tr></table></figure><h3 id="2-2-8-过滤器、自定义指令"><a href="#2-2-8-过滤器、自定义指令" class="headerlink" title="2.2.8 过滤器、自定义指令"></a>2.2.8 过滤器、自定义指令</h3><h3 id="a-过滤器"><a href="#a-过滤器" class="headerlink" title="a) 过滤器"></a>a) 过滤器</h3><p>vue3.0不再支持过滤器，官方建议我们用methods、computed来替换他们</p><h3 id="b-自定义指令"><a href="#b-自定义指令" class="headerlink" title="b) 自定义指令"></a>b) 自定义指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义全局指令</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  mounted(el) &#123;</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义局部指令</span></span><br><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    mounted(el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-9-ref引用页面元素"><a href="#2-2-9-ref引用页面元素" class="headerlink" title="2.2.9 ref引用页面元素"></a>2.2.9 ref引用页面元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> ref=<span class="string">&quot;inputRef&quot;</span> /&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;showRef&quot;</span>&gt;点我显示input内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> HelloWorld from <span class="string">&quot;@/components/HelloWorld.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">defineComponent</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  components: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    HelloWorld,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  setup() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> inputRef = ref();</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> showRef = () =&gt; &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      console.<span class="built_in">log</span>(inputRef.value &amp;&amp; inputRef.value.value);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> &#123; inputRef, showRef &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-10-vue3-0生命周期钩子"><a href="#2-2-10-vue3-0生命周期钩子" class="headerlink" title="2.2.10 vue3.0生命周期钩子"></a>2.2.10 vue3.0生命周期钩子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">&quot;onMounted&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-3-vue-router的使用"><a href="#2-3-vue-router的使用" class="headerlink" title="2.3 vue-router的使用"></a>2.3 vue-router的使用</h3><h3 id="2-3-1-基本使用"><a href="#2-3-1-基本使用" class="headerlink" title="2.3.1 基本使用"></a>2.3.1 基本使用</h3><p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">https://router.vuejs.org/zh/guide/essentials/passing-props.html</a></p><p>router/index.ts</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//createRouter创建路由对象</span></span><br><span class="line"><span class="comment">//createWebHashHistory hash模式</span></span><br><span class="line"><span class="comment">//RouteRecordRaw每一条路由规则的类型文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory, RouteRecordRaw &#125; from <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home from <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//路由规则</span></span><br><span class="line"><span class="keyword">const</span> routes: Array&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    component: () =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHashHistory(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.ts挂载路由</span></span><br><span class="line">createApp(App).use(store).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//App.vue中使用 router-link和router-view</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/&quot;</span>&gt;Home&lt;/router-link&gt; |</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/about&quot;</span>&gt;About&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-动态路由参数"><a href="#2-3-2-动态路由参数" class="headerlink" title="2.3.2 动态路由参数"></a>2.3.2 动态路由参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.修改路由配置</span></span><br><span class="line"><span class="keyword">const</span> routes: Array&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about/:id&#x27;</span>,</span><br><span class="line">    props: <span class="literal">true</span>,             <span class="comment">//如果 props 被设置为 true，route.params 将会被设置为组件属性</span></span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    component: () =&gt; About</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.App.vue跳转路由传参</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/&quot;</span>&gt;Home&lt;/router-link&gt; |</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/about/123&quot;</span>&gt;About&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.About.vue中使用动态路由参数</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div class=<span class="string">&quot;about&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;This is an about page &#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props:[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  created()&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">this</span>.id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-路由传参"><a href="#2-3-3-路由传参" class="headerlink" title="2.3.3 路由传参"></a>2.3.3 路由传参</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.修改路由配置</span></span><br><span class="line"><span class="keyword">const</span> routes: Array&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    <span class="comment">///search?q=vue 会将 &#123;query: &#x27;vue&#x27;&#125; 作为属性传递给 SearchUser 组件。</span></span><br><span class="line">    props: route =&gt; (&#123; query: route.query.q, query2: route.query.m &#125;),</span><br><span class="line">    name: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    component: () =&gt; About</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//App.vue</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/&quot;</span>&gt;Home&lt;/router-link&gt; |</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/about?q=vue&amp;m=123&quot;</span>&gt;About&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//About.vue</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props:[<span class="string">&#x27;query&#x27;</span>,<span class="string">&#x27;query2&#x27;</span>],</span><br><span class="line">  created()&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">this</span>.query,<span class="keyword">this</span>.query2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-编程式导航"><a href="#2-3-4-编程式导航" class="headerlink" title="2.3.4 编程式导航"></a>2.3.4 编程式导航</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;about&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;This is an about page&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;goHome&quot;</span>&gt;点我跳转页面&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; from <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> router = useRouter();</span><br><span class="line">    <span class="keyword">const</span> goHome = () =&gt; &#123;</span><br><span class="line">      router.push(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; goHome &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-导航钩子函数"><a href="#2-3-5-导航钩子函数" class="headerlink" title="2.3.5 导航钩子函数"></a>2.3.5 导航钩子函数</h3><h3 id="a-路由级的导航钩子"><a href="#a-路由级的导航钩子" class="headerlink" title="a) 路由级的导航钩子"></a>a) 路由级的导航钩子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Array&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    component: () =&gt; About,</span><br><span class="line">    <span class="comment">//路由级的导航钩子</span></span><br><span class="line">    beforeEnter:(to,from,next)=&gt;&#123;</span><br><span class="line">      console.<span class="built_in">log</span>(<span class="string">&quot;beforeEnter&quot;</span>,to,from,next)</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="b-全局的导航钩子"><a href="#b-全局的导航钩子" class="headerlink" title="b) 全局的导航钩子"></a>b) 全局的导航钩子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHashHistory(),</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局导航钩子</span></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&quot;全局前置 beforeEach&quot;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line">router.afterEach( route =&gt; &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&quot;全局后置 afterEach&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="c-组件级的导航钩子"><a href="#c-组件级的导航钩子" class="headerlink" title="c) 组件级的导航钩子"></a>c) 组件级的导航钩子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; onBeforeRouteLeave, onBeforeRouteUpdate, useRouter &#125; from <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> router = useRouter();</span><br><span class="line">    <span class="keyword">const</span> goHome = () =&gt; &#123;</span><br><span class="line">      router.push(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组件级的导航钩子</span></span><br><span class="line">    onBeforeRouteLeave((to,from,next) =&gt; &#123;</span><br><span class="line">      console.<span class="built_in">log</span>(<span class="string">&quot;onBeforeRouteLeave&quot;</span>,to,from,next);</span><br><span class="line">      next();</span><br><span class="line">    &#125;);</span><br><span class="line">    onBeforeRouteUpdate((to,from,next) =&gt; &#123;</span><br><span class="line">      console.<span class="built_in">log</span>(<span class="string">&quot;onBeforeRouteUpdate&quot;</span>,next);</span><br><span class="line">      next();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; goHome &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-vuex的使用"><a href="#2-4-vuex的使用" class="headerlink" title="2.4 vuex的使用"></a>2.4 vuex的使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; from <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">createStore</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  state: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    count: <span class="number">0</span></span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  mutations: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      increment(state) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">          state.count++</span></span></span><br><span class="line"><span class="params"><span class="function">      &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">      subtract(state, obj) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">          console.<span class="built_in">log</span>(obj)</span></span></span><br><span class="line"><span class="params"><span class="function">          state.count -= obj.step;</span></span></span><br><span class="line"><span class="params"><span class="function">      &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  getters: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      optCount: function (state) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="keyword">return</span> <span class="string">&#x27;当前最新的count值是：&#x27;</span> + state.count</span></span></span><br><span class="line"><span class="params"><span class="function">      &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  actions: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  modules: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//main.ts</span></span></span><br><span class="line"><span class="function"><span class="title">createApp</span><span class="params">(App)</span>.<span class="title">use</span><span class="params">(store)</span>.<span class="title">use</span><span class="params">(router)</span>.<span class="title">mount</span><span class="params">(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//Home.vue</span></span></span><br><span class="line"><span class="function">&lt;<span class="keyword">template</span>&gt;</span></span><br><span class="line"><span class="function">  &lt;div class</span>=<span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;count值是:&#123;&#123; state.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;getters值是:&#123;&#123; getters.optCount &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;doAdd&quot;</span>&gt;点我+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;doSub&quot;</span>&gt;点我-若干&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, ref &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; from <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> HelloWorld from <span class="string">&quot;@/components/HelloWorld.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">defineComponent</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  components: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    HelloWorld,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  setup() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">//获取store中的信息</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> &#123; state, getters, dispatch, commit &#125; = useStore();</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> doAdd = () =&gt; &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      console.<span class="built_in">log</span>(<span class="string">&quot;doAdd&quot;</span>,commit)</span></span></span><br><span class="line"><span class="params"><span class="function">      commit(<span class="string">&quot;increment&quot;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> doSub = () =&gt; &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      commit(<span class="string">&quot;subtract&quot;</span>, &#123; step: <span class="number">3</span> &#125;);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> &#123; state, getters,doAdd,doSub &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5-vant组件库的使用"><a href="#2-5-vant组件库的使用" class="headerlink" title="2.5 vant组件库的使用"></a>2.5 vant组件库的使用</h3><h3 id="2-5-1-全局引入"><a href="#2-5-1-全局引入" class="headerlink" title="2.5.1 全局引入"></a>2.5.1 全局引入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.安装vant-ui</span></span><br><span class="line"><span class="comment">//注意：3.0项目中安装vue@next</span></span><br><span class="line">npm i vant@next -S</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.main.ts全局引入Vant UI的样式以及组件库</span></span><br><span class="line"><span class="keyword">import</span> Vant from <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vant/lib/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">createApp(App).use(Vant).use(store).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.Home.vue中使用vant组件库</span></span><br><span class="line">&lt;van-button type=<span class="string">&quot;default&quot;</span> @click=<span class="string">&quot;showPopup&quot;</span>&gt;默认按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type=<span class="string">&quot;primary&quot;</span>&gt;主要按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type=<span class="string">&quot;info&quot;</span>&gt;信息按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type=<span class="string">&quot;warning&quot;</span>&gt;警告按钮&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type=<span class="string">&quot;danger&quot;</span>&gt;危险按钮&lt;/van-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;van-popup v-model:show=<span class="string">&quot;flag&quot;</span>&gt;内容&lt;/van-popup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, ref &#125; from <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title">defineComponent</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  components: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  setup() &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> flag = ref(<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> showPopup = ()=&gt;&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      flag.value = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> &#123; flag,showPopup &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;)</span></span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-按需加载"><a href="#2-5-2-按需加载" class="headerlink" title="2.5.2 按需加载"></a>2.5.2 按需加载</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.安装babel-plugin-import</span></span><br><span class="line">npm i babel-plugin-<span class="keyword">import</span> -D</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.修改babel.config.js</span></span><br><span class="line"><span class="keyword">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    [<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line">      libraryName: <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">      libraryDirectory: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">      style: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="string">&#x27;vant&#x27;</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.修改main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button,Popup &#125; from <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line">createApp(App).use(Button).use(Popup).use(store).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.Home.vue使用vant组件</span></span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    &lt;van-button type=<span class="string">&quot;default&quot;</span> @click=<span class="string">&quot;showPopup&quot;</span>&gt;默认按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button type=<span class="string">&quot;primary&quot;</span>&gt;主要按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button type=<span class="string">&quot;info&quot;</span>&gt;信息按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button type=<span class="string">&quot;warning&quot;</span>&gt;警告按钮&lt;/van-button&gt;</span><br><span class="line">    &lt;van-button type=<span class="string">&quot;danger&quot;</span>&gt;危险按钮&lt;/van-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;van-popup v-model:show=<span class="string">&quot;flag&quot;</span>&gt;内容&lt;/van-popup&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="2-6-vue3-0和vue2-0比较"><a href="#2-6-vue3-0和vue2-0比较" class="headerlink" title="2.6 vue3.0和vue2.0比较"></a>2.6 vue3.0和vue2.0比较</h3><p>vue3.0 的发布与 vue2.0 相比，优势主要体现在：更快、更小、更易维护、更易于原生、让开发者更轻松；</p><p>更快</p><p>　　1、virtual DOM 完全重写，mounting &amp; patching 提速 100%；</p><p>　　2、更多编译时 （compile-time）提醒以减少 runtime 开销；</p><p>　　3、基于 Proxy 观察者机制以满足全语言覆盖以及更好的性能；</p><p>　　4、放弃 Object.defineProperty ，使用更快的原生 Proxy；</p><p>　　5、组件实例初始化速度提高 100%;</p><p>　　6、提速一倍/内存使用降低一半；</p><p>更小</p><p>　　1、Tree-shaking 更友好；（tree shaking 是一个术语，通常用于描述移除  上下文中的未引用代码(dead-code)）</p><p>　　2、新的 core runtime：~ 10kb gzipped；</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
